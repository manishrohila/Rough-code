class Solution {
public:
    vector<int> temp;
    void dfs(unordered_map<int,list<int>> &adj,int s , vector<int> &visited)
    {
        temp.push_back(s);
        visited[s]=true;
        for(auto nbr : adj[s])
        {
            if(!visited[nbr])
            {
                dfs(adj,nbr,visited);
            }
        }
    }
    int countCompleteComponents(int n, vector<vector<int>>& edges) {
        unordered_map<int,list<int>> adj;
        for(int i =0;i<n;i++)
        {
            int u = edges[i][0];
            int v = edges[i][1];
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        vector<int> visited(n,0);
        int cnt=0;
        for(int i =0;i<n;i++)
        {
            if(visited[i]==false)
            {
                dfs(adj,i,visited);
                int x = temp.size();
                bool test = 1;
                for(int i =0;i<x ;i++)
                {
                    int sz = adj[i].size();
                    if(sz!=x-1)
                    {
                        test = 0;
                        break;
                    }
                }
                if(test) cnt++;
                temp.clear();
            }
        }
        return cnt;
    }
};
