class Solution {
public:
    bool isvalid(int i,int j ,int n , int m , vector<vector<int>>& grid,int sr ,int sc)
    {
        if(i<m && i>=0 and j<n and j>=0 and grid[sr][sc]<grid[i][j])
            return true;
        else return false ;
    }
    int dfs(int i , int j ,int n ,int m, vector<vector<int>>& grid,int k)
    {
        
        cout<<" dfs of "<<grid[i][j]<<" ";
        int sr = i ;
        int sc=j;
        if(isvalid(i-1,j,n,m,grid,sr,sc))
        {
            k++;
            dfs(i-1,j,n,m,grid,k);
        }
         if(isvalid(i,j+1,n,m,grid,sr,sc))
        {
            k++;
            dfs(i,j+1,n,m,grid,k);
        }
         if(isvalid(i+1,j+1,n,m,grid,sr,sc))
        {
            k++;
            dfs(i+1,j+1,n,m,grid,k);
        }
        return k ;
    }
    int maxMoves(vector<vector<int>>& grid) {
        int cnt =0 ,k=0;
        int m = grid.size();
        int n = grid[0].size();
        for(int i =0;i<m;i++)
        {
                k = dfs(i,0,n,m,grid,k);
                if(k>cnt)
                {
                    cnt = k;
                }
            cout<<endl;
            
        }
        return cnt;
    }
};
