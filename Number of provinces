class Solution {
public:

    void bfs(unordered_map<int,vector<int>> &adj,int s ,vector<bool> &vis)
    {
        
        queue<int> q;
        q.push(s);
        vis[s]=true;
        while(!q.empty())
        {
            int u = q.front();
            q.pop();
            for(int nbr : adj[s])
            {
                if(!vis[nbr])
                {
                    vis[nbr]=true;
                    q.push(nbr);
                }
            }
        }
        return ;
    }

    int findCircleNum(vector<vector<int>>& isConnected) {
        unordered_map<int,vector<int>> adj;
        int n = isConnected.size();
        for(int i =0;i<n;i++)
        {
            for(int j =0;j<n;j++)
            {
                if(isConnected[i][j] && i!=j)
                {
                    adj[i].push_back(j);   
                    adj[j].push_back(i);                   
                }
            }
        }
        int ans =0;
        vector<bool> vis(n+1,false);
        for(int i =0;i<n;i++)
        {
           if(vis[i]==false)
           {
               
               bfs(adj,i,vis);
               ans++;
           }
        }
        return ans;
    }
};
