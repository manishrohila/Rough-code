class Solution
{
public:
    bool isvalid(vector<vector<int>> &grid, int i, int j, int n, int m, vector<vector<int>> &vis)
    {
        if (i < n and i >= 0 and j < m and j >= 0 and vis[i][j] == 0 and grid[i][j] == '1')
            return true;
        else
            return false;
    }
    void dfs(vector<vector<int>> &grid, int i, int j, int n, int m, vector<vector<int>>&vis)
    {
        vis[i][j] = 1;
        
        if (isvalid(grid, i + 1, j, n, m, vis))
        {
            dfs(grid, i + 1, j, n, m, vis);
        }
        if (isvalid(grid, i - 1, j, n, m, vis))
        {
            dfs(grid, i - 1, j, n, m, vis);
        }
        if (isvalid(grid, i, j + 1, n, m, vis))
        {
            dfs(grid, i, j + 1, n, m, vis);
        }
        if (isvalid(grid, i, j - 1, n, m, vis))
        {
            dfs(grid, i, j - 1, n, m, vis);
        }
    }
    int numEnclaves(vector<vector<int>> &grid)
    {
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>> vis(n, vector<int>(m, 0));
        for (int j = 0; j < m; j++)
        {

            if (!vis[0][j] && grid[0][j] == '1')
            {
                dfs(grid, 0, j, n, m, vis);
            }

            if (!vis[n - 1][j] && grid[n - 1][j] == '1')
            {
                dfs(grid, n - 1, j, n, m, vis);
            }
        }

        for (int i = 0; i < n; i++)
        {

            if (!vis[i][0] && grid[i][0] == '1')
            {
                dfs(grid, i, 0, n, m, vis);
            }

            if (!vis[i][m - 1] && grid[i][m - 1] == '1')
            {
                dfs(grid, i, m - 1, n, m, vis);
            }
        }
        int cnt = 0;
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < m; j++)
            {
                
                if (!vis[i][j] and grid[i][j] == 1)
                {
                    cnt++;
                }
            }
            
        }
        return cnt;
    }
};
